<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码随想录</title>
    <link href="/2022/04/21/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    <url>/2022/04/21/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>url：<a href="https://www.programmercarl.com">https://www.programmercarl.com</a></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Study</title>
    <link href="/2022/04/20/SQL-Study/"/>
    <url>/2022/04/20/SQL-Study/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Systems: A Programmer‘s Perspective</title>
    <link href="/2022/04/15/Computer-Systems-A-Programmer-s-Perspective/"/>
    <url>/2022/04/15/Computer-Systems-A-Programmer-s-Perspective/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-A-Tour-of-Computer-System"><a href="#Chapter-1-A-Tour-of-Computer-System" class="headerlink" title="Chapter 1: A Tour of Computer System"></a>Chapter 1: A Tour of Computer System</h1><p><strong>由一个helloworld的整个生命周期来演示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PanYuHaa/PicGo/img/The-Compilation-System.png" alt="The-Compilation-System"></p><p><strong>为什么我们要理解编译系统？</strong></p><p>1⃣️ Optimizing program performance(优化程序性能)</p><p>e.g. 一个switch语句是不是要比一连串的if-else要高效的多？</p><p>2⃣️ Understanding link-time errors(理解链接时出现的错误)</p><p>e.g. 静态变量和全局变量的区别是什么？</p><p>3⃣️ Avoiding security holes(避免安全漏洞)</p><p>e.g. 缓冲区溢出错误产生？</p><p><strong>计算机硬件组成系统以及完成hello world程序的硬件处理过程</strong></p><p>PC(Program Count)：程序计数器，大小为一个字的存储区域。32位系统中，1 word = 4 byte，64位系统中，1 word = 8byte。</p><p>Register file：寄存器。</p><p>ALU：处理器。</p><p>Bus interface：总线。</p><p>Disk：磁盘。</p><p><img src="https://cdn.jsdelivr.net/gh/PanYuHaa/PicGo/img/STEP1-INPUT.png" alt="STEP1-INPUT"></p><p><img src="https://cdn.jsdelivr.net/gh/PanYuHaa/PicGo/img/STEP2-DMA.png" alt="STEP2-DMA"></p><p>DMA技术：数据可以不经过处理器，直接从磁盘抵达内存。</p><p><img src="https://cdn.jsdelivr.net/gh/PanYuHaa/PicGo/img/STEP3-Display.png" alt="STEP3-Display"></p><p>tips：1⃣️ 大容量的设备会比小容量设备运行速度更慢。2⃣️ 运行速度更快的设备比低速设备更贵。</p><p>e.g. 内存虽小但价格和外存的价格差不多。</p><p><img src="https://cdn.jsdelivr.net/gh/PanYuHaa/PicGo/img/Memory%20Hierarchy.png" alt="Memory Hierarchy"></p><p>L1、L2、L3为我们常说的三级缓存。</p><p><strong>操作系统在应用程序和硬件系统之间的角色</strong></p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/PanYuHaa/PicGo/img/The%20Operating%20System%20Manages%20Hardware.png" alt="The Operating System Manages Hardware"></h4><p>1⃣️ 防止硬件被失控的应用程序滥用</p><p>2⃣️ 操作系统提供统一的机制来控制这些复杂的底层硬件</p><p>—————————————————————————————————————</p><h2 id="1-1-信息就是位-上下文"><a href="#1-1-信息就是位-上下文" class="headerlink" title="1.1 信息就是位 + 上下文"></a>1.1 信息就是位 + 上下文</h2><p>1⃣️ <strong>何为上下文？</strong></p><p>上下文，也就是执行任务所需要的相关信息。这个任务可以是一段代码，一个线程，一个进程，一个函数。当这个“任务”，相关信息需要保存下来，就可以使用Context来记录了。</p><h2 id="1-2-程序被其他程序翻译成不同的格式"><a href="#1-2-程序被其他程序翻译成不同的格式" class="headerlink" title="1.2 程序被其他程序翻译成不同的格式"></a>1.2 程序被其他程序翻译成不同的格式</h2><p>1⃣️<strong>GNU是什么？</strong></p><p>GNU是项目开发工具它包含了：EMACS编译器、GCC编译器、GDB调试器、汇编器、链接器、处理二进制文件的工具以及其它一些部件。目前随着发展已经支持许多不同的语言了。</p>]]></content>
    
    
    <categories>
      
      <category>Computer Basics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer</title>
    <link href="/2022/04/12/%E5%89%91%E6%8C%87offer/"/>
    <url>/2022/04/12/%E5%89%91%E6%8C%87offer/</url>
    
    <content type="html"><![CDATA[<h1 id="数组与矩阵"><a href="#数组与矩阵" class="headerlink" title="数组与矩阵"></a>数组与矩阵</h1><h2 id="3-数组中重复的数字"><a href="#3-数组中重复的数字" class="headerlink" title="3. 数组中重复的数字"></a>3. 数组中重复的数字</h2><h2 id="4-二维数组中的查找"><a href="#4-二维数组中的查找" class="headerlink" title="4. 二维数组中的查找"></a>4. 二维数组中的查找</h2><p><strong>描述</strong></p><p>在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p><p>[[1,2,8,9],<br>[2,4,9,12],<br>[4,7,10,13],<br>[6,8,11,15]] </p><p>给定 target = 7，返回 true。 </p><p>给定 target = 3，返回 false。</p><p><strong>思路</strong></p><p>(1)对于数组 arr [row] [col] 的row和col，我们是按先行后列来看的。用二维数组举例，arr.length 表示的是row的长度，arr[0].length 表示的是列的长度。</p><p>(2)这种问题的通常思路一般是双循环，时间复杂度自然到达了o(n^2)，所以最直接的优化方式就是降低时间复杂度，把二维数组的处理展平变成一围的地图然后通过排序的规律来找到突破口。</p><p><strong>解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span> [][] array)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> search;<br>      <br><span class="hljs-comment">//不越界的情况下search</span><br>    <span class="hljs-keyword">while</span>(row &lt;= (array.length - <span class="hljs-number">1</span>) &amp;&amp; col &gt;= <span class="hljs-number">0</span>)&#123;<br>        search = array[row][col]; <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-keyword">if</span>(search == target)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(search &gt; target)&#123;<br>            col--;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(search &lt; target)&#123;<br>            row++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-替换空格"><a href="#5-替换空格" class="headerlink" title="5. 替换空格"></a>5. 替换空格</h2><p><strong>描述</strong></p><p>请实现一个函数，将一个字符串s中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p><strong>思路</strong></p><p>最先学会的是分清楚String, StringBuffer, StringBuilder。</p><p>操作<strong>少量的数据</strong>:适用String</p><p><strong>单线程</strong>操作字符串缓冲区下操作<strong>大量数据</strong>:适用StringBuilder(线程不安全)</p><p><strong>多线程</strong>操作字符串缓冲区下操作<strong>大量数据</strong>:适用StringBuffer(线程安全)</p><p>String长度不可变，其余两个长度可变，默认长度为16</p><p>实际上是实现了java中String.replace(String1, String2)的功能</p><p><strong>解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceSpace</span> <span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">//如果本来就是空字符串那我们返回就好。</span><br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">null</span> || s.length()==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> s;<br>        <span class="hljs-comment">//使用StringBuilder在遍历过程中构建新的字符串。</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">blank</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>            <span class="hljs-keyword">if</span>(s.charAt(i)!=blank)<br>                builder.append(s.charAt(i));<br>            <span class="hljs-keyword">else</span><br>                builder.append(<span class="hljs-string">&quot;%20&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="29-顺时针打印矩阵"><a href="#29-顺时针打印矩阵" class="headerlink" title="29. 顺时针打印矩阵"></a>29. 顺时针打印矩阵</h2><p><strong>描述</strong></p><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字</p><p><strong>思路</strong></p><p>简单来说，就是不断地收缩矩阵的边界，确定边界，锁一动一<br>定义四个变量代表范围，up、down、left、right</p><ol><li>向右走存入整行的值，当存入后，该行再也不会被遍历，代表上边界的 up 加一，同时判断是否和代表下边界的 down 交错 </li><li>向下走存入整列的值，当存入后，该列再也不会被遍历，代表右边界的 right 减一，同时判断是否和代表左边界的 left 交错 </li><li>向左走存入整行的值，当存入后，该行再也不会被遍历，代表下边界的 down 减一，同时判断是否和代表上边界的 up 交错 </li><li>向上走存入整列的值，当存入后，该列再也不会被遍历，代表左边界的 left 加一，同时判断是否和代表右边界的 right 交错</li></ol><p><strong>解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">printMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> [][] matrix)</span> &#123;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-literal">null</span> || matrix.length == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">down</span> <span class="hljs-operator">=</span> matrix.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">// 最上面一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> left; col &lt;= right; col++)&#123;<br>                list.add(matrix[up][col]);<br>            &#125;<br>            <span class="hljs-comment">// 向下逼近</span><br>            up++;<br>            <span class="hljs-comment">// 判断是否越界</span><br>            <span class="hljs-keyword">if</span>(up &gt; down)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 最右边一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> up; row &lt;= down; row++)&#123;<br>                list.add(matrix[row][right]);<br>            &#125;<br>            <span class="hljs-comment">// 向左逼近</span><br>            right--;<br>            <span class="hljs-comment">// 判断是否越界</span><br>            <span class="hljs-keyword">if</span>(left &gt; right)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 最下面一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> right; col &gt;= left; col--)&#123;<br>                list.add(matrix[down][col]);<br>            &#125;<br>            <span class="hljs-comment">// 向上逼近</span><br>            down--;<br>            <span class="hljs-comment">// 判断是否越界</span><br>            <span class="hljs-keyword">if</span>(up &gt; down)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 最左边一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> down; row &gt;= up; row--)&#123;<br>                list.add(matrix[row][left]);<br>            &#125;<br>            <span class="hljs-comment">// 向右逼近</span><br>            left++;<br>            <span class="hljs-comment">// 判断是否越界</span><br>            <span class="hljs-keyword">if</span>(left &gt; right)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="50-第一个只出现一次的字符位置"><a href="#50-第一个只出现一次的字符位置" class="headerlink" title="50. 第一个只出现一次的字符位置"></a>50. 第一个只出现一次的字符位置</h2><p><strong>描述</strong></p><p>在一个长为 字符串中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）（从0开始计数）</p><p><strong>思路</strong></p><p>1、用indexOf和lastIndexOf来实现，若找到直接返回下标，若没找到返回-1，indexOf为最先出现的位置，lastIndexOf为最后一次出现的位置。</p><p>2、用Map，Map中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</p><ul><li>需要注意的是，Map中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li><li>Map中常用的集合为HashMap集合、LinkedHashMap集合。</li></ul><p><strong>解法1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">FirstNotRepeatingChar</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;                    <span class="hljs-keyword">if</span>(str.indexOf(str.charAt(i)) != str.lastIndexOf(str.charAt(i)))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">FirstNotRepeatingChar</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-comment">//ArrayList list=new ArrayList;</span><br>        java.util.HashMap&lt;Character,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.HashMap&lt;&gt;();<br>        <span class="hljs-type">char</span> [] arr=str.toCharArray();<br>        <span class="hljs-comment">//把数组中的值添加到map集合中，并且记录出现的次数</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-comment">//containsKey返回布尔类型</span><br>             <span class="hljs-keyword">if</span>(!map.containsKey(arr[i]))&#123;<br>                 map.put(arr[i],<span class="hljs-number">1</span>);<br>             &#125;<span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-type">int</span> count=map.get(arr[i]);<br>                <span class="hljs-comment">//replace替换的事value而不是key，key是唯一的</span><br>                 map.replace(arr[i],count+<span class="hljs-number">1</span>);<br>             &#125;<br>         &#125;<br>        <span class="hljs-comment">//根据map集合中的key，寻找value，返回第一个出现第一次的值，返回i</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(map.get(arr[i])==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;      <br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
